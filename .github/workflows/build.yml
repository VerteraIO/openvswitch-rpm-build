name: Build OVS RPMs (Multi-Distro)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Open vSwitch version (e.g., 3.6.0)"
        required: false
        default: "3.6.0"
      distro:
        description: "Distribution to build for (rocky, alma, rhel, all)"
        required: false
        default: "all"
      distro_version:
        description: "Distribution version (9, 10, all)"
        required: false
        default: "all"
  release:
    types: [published]
  push:
    tags:
      - 'v*'
    branches: [ main, master ]
    paths:
      - '**'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**'

env:
  # Default version - will be overridden by tags or inputs
  OVS_VERSION: ${{ github.event.inputs.version || '3.6.0' }}

jobs:
  build-el9:
    runs-on: ubuntu-latest
    outputs:
      ovs_version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set OVS version from tag or input
        id: set-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref }}"
            VERSION="${VERSION#refs/tags/v}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version || '3.6.0' }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build RPMs using Docker
        run: |
          make docker-build VERSION="${{ steps.set-version.outputs.version }}" DISTRO="rocky" DISTRO_VERSION="9"

      - name: Locate and prepare RPMs
        id: find
        run: |
          OUTPUT_DIR="out/rocky9"
          if [ -d "${OUTPUT_DIR}" ]; then
            find "${OUTPUT_DIR}" -type f -name '*.rpm' -print
            # Copy RPMs to a flat directory for artifact upload
            mkdir -p rpm-artifacts-el9
            cp "${OUTPUT_DIR}"/*.rpm rpm-artifacts-el9/ 2>/dev/null || true
            echo "rpm_dir=rpm-artifacts-el9" >> $GITHUB_OUTPUT
          else
            echo "No output directory found: ${OUTPUT_DIR}"
            exit 1
          fi

      - name: Upload RPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ovs-rpms-el9-${{ steps.set-version.outputs.version }}
          path: ${{ steps.find.outputs.rpm_dir }}/*.rpm
          if-no-files-found: error

  build-el10:
    runs-on: ubuntu-latest
    outputs:
      ovs_version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set OVS version from tag or input
        id: set-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref }}"
            VERSION="${VERSION#refs/tags/v}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version || '3.6.0' }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build RPMs using Docker
        run: |
          make docker-build VERSION="${{ steps.set-version.outputs.version }}" DISTRO="rocky" DISTRO_VERSION="10"

      - name: Locate and prepare RPMs
        id: find
        run: |
          OUTPUT_DIR="out/rocky10"
          if [ -d "${OUTPUT_DIR}" ]; then
            find "${OUTPUT_DIR}" -type f -name '*.rpm' -print
            # Copy RPMs to a flat directory for artifact upload
            mkdir -p rpm-artifacts-el10
            cp "${OUTPUT_DIR}"/*.rpm rpm-artifacts-el10/ 2>/dev/null || true
            echo "rpm_dir=rpm-artifacts-el10" >> $GITHUB_OUTPUT
          else
            echo "No output directory found: ${OUTPUT_DIR}"
            exit 1
          fi

      - name: Upload RPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ovs-rpms-el10-${{ steps.set-version.outputs.version }}
          path: ${{ steps.find.outputs.rpm_dir }}/*.rpm
          if-no-files-found: error


  # Create GitHub release with RPM artifacts for tags
  release:
    needs: [build-el9, build-el10]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.rpm
          generate_release_notes: true
          draft: false
